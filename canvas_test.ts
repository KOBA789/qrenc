import * as assert from "assert";
import { Canvas, dataModules, MaskPatterns } from "./canvas";
import { NormalVersion, EcLevel, Colors } from "./types";

(function testTimingPattern() {
  const c = new Canvas(NormalVersion.tryFrom(1)!, EcLevel.tryFrom('L')!);
  c.drawTimingPatterns();

  const expected = `
?????????????????????
?????????????????????
?????????????????????
?????????????????????
?????????????????????
?????????????????????
????????#.#.#????????
?????????????????????
??????#??????????????
??????.??????????????
??????#??????????????
??????.??????????????
??????#??????????????
?????????????????????
?????????????????????
?????????????????????
?????????????????????
?????????????????????
?????????????????????
?????????????????????
?????????????????????
  `.trim();

  assert.strictEqual(c.toDebugString(), expected);
})();

(function testAllFunctionalPatternsQr() {
  const c = new Canvas(NormalVersion.tryFrom(2)!, 'L');
  c.drawAllFunctionalPatterns();
  const expected = `
#######..????????.#######
#.....#..????????.#.....#
#.###.#..????????.#.###.#
#.###.#..????????.#.###.#
#.###.#..????????.#.###.#
#.....#..????????.#.....#
#######.#.#.#.#.#.#######
.........????????........
......#..????????........
??????.??????????????????
??????#??????????????????
??????.??????????????????
??????#??????????????????
??????.??????????????????
??????#??????????????????
??????.??????????????????
??????#?????????#####????
........#???????#...#????
#######..???????#.#.#????
#.....#..???????#...#????
#.###.#..???????#####????
#.###.#..????????????????
#.###.#..????????????????
#.....#..????????????????
#######..????????????????
  `.trim();
    assert.strictEqual(c.toDebugString(), expected);
})();

(function testDataModules() {
  const expected = [
    [20, 20], [19, 20], [20, 19], [19, 19], [20, 18], [19, 18],
    [20, 17], [19, 17], [20, 16], [19, 16], [20, 15], [19, 15],
    [20, 14], [19, 14], [20, 13], [19, 13], [20, 12], [19, 12],
    [20, 11], [19, 11], [20, 10], [19, 10], [20, 9], [19, 9],
    [20, 8], [19, 8], [20, 7], [19, 7], [20, 6], [19, 6],
    [20, 5], [19, 5], [20, 4], [19, 4], [20, 3], [19, 3],
    [20, 2], [19, 2], [20, 1], [19, 1], [20, 0], [19, 0],

    [18, 0], [17, 0], [18, 1], [17, 1], [18, 2], [17, 2],
    [18, 3], [17, 3], [18, 4], [17, 4], [18, 5], [17, 5],
    [18, 6], [17, 6], [18, 7], [17, 7], [18, 8], [17, 8],
    [18, 9], [17, 9], [18, 10], [17, 10], [18, 11], [17, 11],
    [18, 12], [17, 12], [18, 13], [17, 13], [18, 14], [17, 14],
    [18, 15], [17, 15], [18, 16], [17, 16], [18, 17], [17, 17],
    [18, 18], [17, 18], [18, 19], [17, 19], [18, 20], [17, 20],

    [16, 20], [15, 20], [16, 19], [15, 19], [16, 18], [15, 18],
    [16, 17], [15, 17], [16, 16], [15, 16], [16, 15], [15, 15],
    [16, 14], [15, 14], [16, 13], [15, 13], [16, 12], [15, 12],
    [16, 11], [15, 11], [16, 10], [15, 10], [16, 9], [15, 9],
    [16, 8], [15, 8], [16, 7], [15, 7], [16, 6], [15, 6],
    [16, 5], [15, 5], [16, 4], [15, 4], [16, 3], [15, 3],
    [16, 2], [15, 2], [16, 1], [15, 1], [16, 0], [15, 0],

    [14, 0], [13, 0], [14, 1], [13, 1], [14, 2], [13, 2],
    [14, 3], [13, 3], [14, 4], [13, 4], [14, 5], [13, 5],
    [14, 6], [13, 6], [14, 7], [13, 7], [14, 8], [13, 8],
    [14, 9], [13, 9], [14, 10], [13, 10], [14, 11], [13, 11],
    [14, 12], [13, 12], [14, 13], [13, 13], [14, 14], [13, 14],
    [14, 15], [13, 15], [14, 16], [13, 16], [14, 17], [13, 17],
    [14, 18], [13, 18], [14, 19], [13, 19], [14, 20], [13, 20],

    [12, 20], [11, 20], [12, 19], [11, 19], [12, 18], [11, 18],
    [12, 17], [11, 17], [12, 16], [11, 16], [12, 15], [11, 15],
    [12, 14], [11, 14], [12, 13], [11, 13], [12, 12], [11, 12],
    [12, 11], [11, 11], [12, 10], [11, 10], [12, 9], [11, 9],
    [12, 8], [11, 8], [12, 7], [11, 7], [12, 6], [11, 6],
    [12, 5], [11, 5], [12, 4], [11, 4], [12, 3], [11, 3],
    [12, 2], [11, 2], [12, 1], [11, 1], [12, 0], [11, 0],

    [10, 0], [9, 0], [10, 1], [9, 1], [10, 2], [9, 2],
    [10, 3], [9, 3], [10, 4], [9, 4], [10, 5], [9, 5],
    [10, 6], [9, 6], [10, 7], [9, 7], [10, 8], [9, 8],
    [10, 9], [9, 9], [10, 10], [9, 10], [10, 11], [9, 11],
    [10, 12], [9, 12], [10, 13], [9, 13], [10, 14], [9, 14],
    [10, 15], [9, 15], [10, 16], [9, 16], [10, 17], [9, 17],
    [10, 18], [9, 18], [10, 19], [9, 19], [10, 20], [9, 20],

    [8, 20], [7, 20], [8, 19], [7, 19], [8, 18], [7, 18],
    [8, 17], [7, 17], [8, 16], [7, 16], [8, 15], [7, 15],
    [8, 14], [7, 14], [8, 13], [7, 13], [8, 12], [7, 12],
    [8, 11], [7, 11], [8, 10], [7, 10], [8, 9], [7, 9],
    [8, 8], [7, 8], [8, 7], [7, 7], [8, 6], [7, 6],
    [8, 5], [7, 5], [8, 4], [7, 4], [8, 3], [7, 3],
    [8, 2], [7, 2], [8, 1], [7, 1], [8, 0], [7, 0],

    [5, 0], [4, 0], [5, 1], [4, 1], [5, 2], [4, 2],
    [5, 3], [4, 3], [5, 4], [4, 4], [5, 5], [4, 5],
    [5, 6], [4, 6], [5, 7], [4, 7], [5, 8], [4, 8],
    [5, 9], [4, 9], [5, 10], [4, 10], [5, 11], [4, 11],
    [5, 12], [4, 12], [5, 13], [4, 13], [5, 14], [4, 14],
    [5, 15], [4, 15], [5, 16], [4, 16], [5, 17], [4, 17],
    [5, 18], [4, 18], [5, 19], [4, 19], [5, 20], [4, 20],

    [3, 20], [2, 20], [3, 19], [2, 19], [3, 18], [2, 18],
    [3, 17], [2, 17], [3, 16], [2, 16], [3, 15], [2, 15],
    [3, 14], [2, 14], [3, 13], [2, 13], [3, 12], [2, 12],
    [3, 11], [2, 11], [3, 10], [2, 10], [3, 9], [2, 9],
    [3, 8], [2, 8], [3, 7], [2, 7], [3, 6], [2, 6],
    [3, 5], [2, 5], [3, 4], [2, 4], [3, 3], [2, 3],
    [3, 2], [2, 2], [3, 1], [2, 1], [3, 0], [2, 0],

    [1, 0], [0, 0], [1, 1], [0, 1], [1, 2], [0, 2],
    [1, 3], [0, 3], [1, 4], [0, 4], [1, 5], [0, 5],
    [1, 6], [0, 6], [1, 7], [0, 7], [1, 8], [0, 8],
    [1, 9], [0, 9], [1, 10], [0, 10], [1, 11], [0, 11],
    [1, 12], [0, 12], [1, 13], [0, 13], [1, 14], [0, 14],
    [1, 15], [0, 15], [1, 16], [0, 16], [1, 17], [0, 17],
    [1, 18], [0, 18], [1, 19], [0, 19], [1, 20], [0, 20],
  ];
  const actual = dataModules(NormalVersion.tryFrom(1)!);
  assert.deepStrictEqual([...actual], expected);
})();

(function testCodewordsQr2() {
  const c = new Canvas(NormalVersion.tryFrom(2)!, 'L');
  c.drawAllFunctionalPatterns();
  c.drawData(new Uint8Array([
    0x92,0x49,0x24,0x92,0x49,0x24,0x92,0x49,0x24,0x92,0x49,0x24,0x92,
    0x49,0x24,0x92,0x49,0x24,0x92,0x49,0x24,0x92,0x49,0x24,0x92,0x49,
    0x24,0x92,0x49,0x24,0x92,0x49,0x24,0x92,0x49,0x24,0x92,0x49,0x24,
    0x92,0x49,0x24,0x92,0x49,0x24
  ]), new Uint8Array([]));
  const expected = `
#######..--*---*-.#######
#.....#..-*-*-*-*.#.....#
#.###.#..*---*---.#.###.#
#.###.#..--*---*-.#.###.#
#.###.#..-*-*-*-*.#.###.#
#.....#..*---*---.#.....#
#######.#.#.#.#.#.#######
.........--*---*-........
......#..-*-*-*-*........
--*-*-.-**---*---*--**--*
-*-*--#----*---*---------
*----*.*--*-*-*-*-**--**-
--*-*-#-**---*---*--**--*
-*-*--.----*---*---------
*----*#*--*-*-*-*-**--**-
--*-*-.-**---*---*--**--*
-*-*--#----*---*#####----
........#-*-*-*-#...#-**-
#######..*---*--#.#.#*--*
#.....#..--*---*#...#----
#.###.#..-*-*-*-#####-**-
#.###.#..*---*--*----*--*
#.###.#..--*------**-----
#.....#..-*-*-**-*--*-**-
#######..*---*--*----*--*
  `.trim();
  assert.strictEqual(c.toDebugString(), expected);
})();

(function testApplyMaskQr() {
  const c = new Canvas(NormalVersion.tryFrom(1)!, 'L');
  c.drawAllFunctionalPatterns();
  c.applyMask(MaskPatterns.Checkerboard);

  assert.strictEqual(c.toDebugString(), `
#######...#.#.#######
#.....#..#.#..#.....#
#.###.#.#.#.#.#.###.#
#.###.#..#.#..#.###.#
#.###.#...#.#.#.###.#
#.....#..#.#..#.....#
#######.#.#.#.#######
........##.#.........
###.#####.#.###...#..
.#.#.#.#.#.#.#.#.#.#.
#.#.#.#.#.#.#.#.#.#.#
.#.#.#.#.#.#.#.#.#.#.
#.#.#.#.#.#.#.#.#.#.#
........##.#.#.#.#.#.
#######.#.#.#.#.#.#.#
#.....#.##.#.#.#.#.#.
#.###.#.#.#.#.#.#.#.#
#.###.#..#.#.#.#.#.#.
#.###.#.#.#.#.#.#.#.#
#.....#.##.#.#.#.#.#.
#######.#.#.#.#.#.#.#
  `.trim());
})();

function createTestCanvas () {
  const c = new Canvas(NormalVersion.tryFrom(1)!, 'Q');
  c.drawAllFunctionalPatterns();
  c.drawData(
    new Uint8Array([0x20,0x5b,0x0b,0x78,0xd1,0x72,0xdc,0x4d,0x43,0x40,0xec,0x11,0x00]),
    new Uint8Array([0xa8,0x48,0x16,0x52,0xd9,0x36,0x9c,0x00,0x2e,0x0f,0xb4,0x7a,0x10])
  );
  c.applyMask(MaskPatterns.Checkerboard);
  return c;
}

(function testCheckPenaltyCanvas() {
  const c = createTestCanvas();
  assert.strictEqual(c.toDebugString(), `
#######.##....#######
#.....#.#..#..#.....#
#.###.#.#..##.#.###.#
#.###.#.#.....#.###.#
#.###.#.#.#...#.###.#
#.....#...#...#.....#
#######.#.#.#.#######
........#............
.##.#.##....#.#.#####
.#......####....#...#
..##.###.##...#.##...
.##.##.#..##.#.#.###.
#...#.#.#.###.###.#.#
........##.#..#...#.#
#######.#.#....#.##..
#.....#..#.##.##.#...
#.###.#.#.#...#######
#.###.#..#.#.#.#...#.
#.###.#.#...####.#..#
#.....#.#.##.#...#.##
#######.....####....#
  `.trim());
})();

(function testPenaltyScoreAdjacent() {
  const c = createTestCanvas();
  assert.strictEqual(c.computeAdjacentPenaltyScore(true), 88);
  assert.strictEqual(c.computeAdjacentPenaltyScore(false), 92);
})();

(function testPenaltyScoreBlock() {
  const c = createTestCanvas();
  assert.strictEqual(c.computeBlockPenaltyScore(), 90);
})();

(function testPenaltyScoreFinder() {
  const c = createTestCanvas();
  assert.strictEqual(c.computeFinderPenaltyScore(true), 0);
  assert.strictEqual(c.computeFinderPenaltyScore(false), 40);
})();

(function testPenaltyScoreBalance() {
  const c = createTestCanvas();
  assert.strictEqual(c.computeBalancePenaltyScore(), 2);
})();
