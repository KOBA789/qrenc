import { Table, EcLevel, Version } from "./types";

export function createErrorCorrectionCode(
  data: Uint8Array,
  ecCodeSize: number
): Uint8Array {
  const logDen = GENERATION_POLYNOMIALS[ecCodeSize];
  const res = new Uint8Array(data.length + ecCodeSize);
  res.set(data);
  for (let i = 0; i < data.length; ++i) {
    const leadCoeff = res[i];
    if (leadCoeff === 0) {
      continue;
    }
    const logLeadCoeff = LOG_TABLE[leadCoeff];
    for (let k = 0; k < logDen.length; ++k) {
      res[i + k + 1] ^= EXP_TABLE[(logDen[k] + logLeadCoeff) % 255];
    }
  }
  return res.subarray(data.length);
}

export function interleave(blocks: Uint8Array[]): Uint8Array {
  let maxBlockLen = 0;
  let sumOfBlockLen = 0;
  for (const block of blocks) {
    if (maxBlockLen < block.length) {
      maxBlockLen = block.length;
    }
    sumOfBlockLen += block.length;
  }
  const res = new Uint8Array(sumOfBlockLen);
  let pos = 0;
  for (let i = 0; i < maxBlockLen; ++i) {
    for (const block of blocks) {
      if (i < block.length) {
        res[pos++] = block[i];
      }
    }
  }
  return res;
}

export function* chunks(
  orig: Uint8Array,
  chunkSize: number
): IterableIterator<Uint8Array> {
  for (let i = 0; i < orig.length; i += chunkSize) {
    yield orig.subarray(i, Math.min(i + chunkSize, orig.length));
  }
}

export function constructCodewords(
  rawBits: Uint8Array,
  version: Version,
  ecLevel: EcLevel
): [Uint8Array, Uint8Array] {
  const [block1Size, block1Count, block2Size, block2Count] = version.fetch(
    ecLevel,
    DATA_BYTES_PER_BLOCK
  );
  const block1End = block1Size * block1Count;
  const blocks = [
    ...chunks(rawBits.subarray(0, block1End), block1Size),
    ...chunks(rawBits.subarray(block1End), block2Size)
  ];
  const ecCodeSize = version.fetch(ecLevel, EC_BYTES_PER_BLOCK);
  const ecCodes = blocks.map((block) => createErrorCorrectionCode(block, ecCodeSize));

  const blockBytes = interleave(blocks);
  const ecBytes = interleave(ecCodes);

  return [blockBytes, ecBytes];
}

export function maxAllowedErrors(version: Version, ecLevel: EcLevel): number {
  function p() {
    if (version.v === 1 && ecLevel === 'L') {
      return 3;
    }
    if (version.v === 2 && ecLevel === 'L') {
      return 2;
    }
    if (version.v === 1 && ecLevel === 'M') {
      return 2;
    }
    if (version.v === 3 && ecLevel === 'L') {
      return 1;
    }
    if (version.v === 1) {
      return 1;
    }
    return 0;
  }
  const ecBytesPerBlock = version.fetch(ecLevel, EC_BYTES_PER_BLOCK);
  const [_, count1, __, count2] = version.fetch(ecLevel, DATA_BYTES_PER_BLOCK);
  const ecBytes = (count1 + count2) * ecBytesPerBlock;

  return Math.floor((ecBytes - p()) / 2);
}

// prettier-ignore
const EXP_TABLE = new Uint8Array([
  0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1d, 0x3a, 0x74, 0xe8, 0xcd, 0x87, 0x13, 0x26,
  0x4c, 0x98, 0x2d, 0x5a, 0xb4, 0x75, 0xea, 0xc9, 0x8f, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0,
  0x9d, 0x27, 0x4e, 0x9c, 0x25, 0x4a, 0x94, 0x35, 0x6a, 0xd4, 0xb5, 0x77, 0xee, 0xc1, 0x9f, 0x23,
  0x46, 0x8c, 0x05, 0x0a, 0x14, 0x28, 0x50, 0xa0, 0x5d, 0xba, 0x69, 0xd2, 0xb9, 0x6f, 0xde, 0xa1,
  0x5f, 0xbe, 0x61, 0xc2, 0x99, 0x2f, 0x5e, 0xbc, 0x65, 0xca, 0x89, 0x0f, 0x1e, 0x3c, 0x78, 0xf0,
  0xfd, 0xe7, 0xd3, 0xbb, 0x6b, 0xd6, 0xb1, 0x7f, 0xfe, 0xe1, 0xdf, 0xa3, 0x5b, 0xb6, 0x71, 0xe2,
  0xd9, 0xaf, 0x43, 0x86, 0x11, 0x22, 0x44, 0x88, 0x0d, 0x1a, 0x34, 0x68, 0xd0, 0xbd, 0x67, 0xce,
  0x81, 0x1f, 0x3e, 0x7c, 0xf8, 0xed, 0xc7, 0x93, 0x3b, 0x76, 0xec, 0xc5, 0x97, 0x33, 0x66, 0xcc,
  0x85, 0x17, 0x2e, 0x5c, 0xb8, 0x6d, 0xda, 0xa9, 0x4f, 0x9e, 0x21, 0x42, 0x84, 0x15, 0x2a, 0x54,
  0xa8, 0x4d, 0x9a, 0x29, 0x52, 0xa4, 0x55, 0xaa, 0x49, 0x92, 0x39, 0x72, 0xe4, 0xd5, 0xb7, 0x73,
  0xe6, 0xd1, 0xbf, 0x63, 0xc6, 0x91, 0x3f, 0x7e, 0xfc, 0xe5, 0xd7, 0xb3, 0x7b, 0xf6, 0xf1, 0xff,
  0xe3, 0xdb, 0xab, 0x4b, 0x96, 0x31, 0x62, 0xc4, 0x95, 0x37, 0x6e, 0xdc, 0xa5, 0x57, 0xae, 0x41,
  0x82, 0x19, 0x32, 0x64, 0xc8, 0x8d, 0x07, 0x0e, 0x1c, 0x38, 0x70, 0xe0, 0xdd, 0xa7, 0x53, 0xa6,
  0x51, 0xa2, 0x59, 0xb2, 0x79, 0xf2, 0xf9, 0xef, 0xc3, 0x9b, 0x2b, 0x56, 0xac, 0x45, 0x8a, 0x09,
  0x12, 0x24, 0x48, 0x90, 0x3d, 0x7a, 0xf4, 0xf5, 0xf7, 0xf3, 0xfb, 0xeb, 0xcb, 0x8b, 0x0b, 0x16,
  0x2c, 0x58, 0xb0, 0x7d, 0xfa, 0xe9, 0xcf, 0x83, 0x1b, 0x36, 0x6c, 0xd8, 0xad, 0x47, 0x8e, 0x01,
]);

// prettier-ignore
const LOG_TABLE = new Uint8Array([
  0xff, 0x00, 0x01, 0x19, 0x02, 0x32, 0x1a, 0xc6, 0x03, 0xdf, 0x33, 0xee, 0x1b, 0x68, 0xc7, 0x4b,
  0x04, 0x64, 0xe0, 0x0e, 0x34, 0x8d, 0xef, 0x81, 0x1c, 0xc1, 0x69, 0xf8, 0xc8, 0x08, 0x4c, 0x71,
  0x05, 0x8a, 0x65, 0x2f, 0xe1, 0x24, 0x0f, 0x21, 0x35, 0x93, 0x8e, 0xda, 0xf0, 0x12, 0x82, 0x45,
  0x1d, 0xb5, 0xc2, 0x7d, 0x6a, 0x27, 0xf9, 0xb9, 0xc9, 0x9a, 0x09, 0x78, 0x4d, 0xe4, 0x72, 0xa6,
  0x06, 0xbf, 0x8b, 0x62, 0x66, 0xdd, 0x30, 0xfd, 0xe2, 0x98, 0x25, 0xb3, 0x10, 0x91, 0x22, 0x88,
  0x36, 0xd0, 0x94, 0xce, 0x8f, 0x96, 0xdb, 0xbd, 0xf1, 0xd2, 0x13, 0x5c, 0x83, 0x38, 0x46, 0x40,
  0x1e, 0x42, 0xb6, 0xa3, 0xc3, 0x48, 0x7e, 0x6e, 0x6b, 0x3a, 0x28, 0x54, 0xfa, 0x85, 0xba, 0x3d,
  0xca, 0x5e, 0x9b, 0x9f, 0x0a, 0x15, 0x79, 0x2b, 0x4e, 0xd4, 0xe5, 0xac, 0x73, 0xf3, 0xa7, 0x57,
  0x07, 0x70, 0xc0, 0xf7, 0x8c, 0x80, 0x63, 0x0d, 0x67, 0x4a, 0xde, 0xed, 0x31, 0xc5, 0xfe, 0x18,
  0xe3, 0xa5, 0x99, 0x77, 0x26, 0xb8, 0xb4, 0x7c, 0x11, 0x44, 0x92, 0xd9, 0x23, 0x20, 0x89, 0x2e,
  0x37, 0x3f, 0xd1, 0x5b, 0x95, 0xbc, 0xcf, 0xcd, 0x90, 0x87, 0x97, 0xb2, 0xdc, 0xfc, 0xbe, 0x61,
  0xf2, 0x56, 0xd3, 0xab, 0x14, 0x2a, 0x5d, 0x9e, 0x84, 0x3c, 0x39, 0x53, 0x47, 0x6d, 0x41, 0xa2,
  0x1f, 0x2d, 0x43, 0xd8, 0xb7, 0x7b, 0xa4, 0x76, 0xc4, 0x17, 0x49, 0xec, 0x7f, 0x0c, 0x6f, 0xf6,
  0x6c, 0xa1, 0x3b, 0x52, 0x29, 0x9d, 0x55, 0xaa, 0xfb, 0x60, 0x86, 0xb1, 0xbb, 0xcc, 0x3e, 0x5a,
  0xcb, 0x59, 0x5f, 0xb0, 0x9c, 0xa9, 0xa0, 0x51, 0x0b, 0xf5, 0x16, 0xeb, 0x7a, 0x75, 0x2c, 0xd7,
  0x4f, 0xae, 0xd5, 0xe9, 0xe6, 0xe7, 0xad, 0xe8, 0x74, 0xd6, 0xf4, 0xea, 0xa8, 0x50, 0x58, 0xaf,
]);

// prettier-ignore
const GENERATION_POLYNOMIALS_BUF = new Uint8Array([
  0x00, 0x19, 0x01, 0xc6, 0xc7, 0x03, 0x4b, 0xf9, 0x4e, 0x06, 0x71, 0xa4,
  0xa6, 0x77, 0x0a, 0xa6, 0x00, 0x86, 0x05, 0xb0, 0x0f, 0x57, 0xe5, 0x92,
  0x95, 0xee, 0x66, 0x15, 0xaf, 0xee, 0xd0, 0xf9, 0xd7, 0xfc, 0xc4, 0x1c,
  0x5f, 0xf6, 0x89, 0xe7, 0xeb, 0x95, 0x0b, 0x7b, 0x24, 0xfb, 0x43, 0x2e,
  0x3d, 0x76, 0x46, 0x40, 0x5e, 0x20, 0x2d, 0xdc, 0xc0, 0x5b, 0xc2, 0xac,
  0xb1, 0xd1, 0x74, 0xe3, 0x0a, 0x37, 0x66, 0x2b, 0x62, 0x79, 0xbb, 0x71,
  0xc6, 0x8f, 0x83, 0x57, 0x9d, 0x42, 0x4a, 0x98, 0xb0, 0x64, 0x56, 0x64,
  0x6a, 0x68, 0x82, 0xda, 0xce, 0x8c, 0x4e, 0xc7, 0xf9, 0x9b, 0x30, 0xbe,
  0x7c, 0xda, 0x89, 0xd8, 0x57, 0xcf, 0x3b, 0x16, 0x5b, 0x08, 0xb7, 0x3d,
  0x5b, 0xca, 0x25, 0x33, 0x3a, 0x3a, 0xed, 0x8c, 0x7c, 0x05, 0x63, 0x69,
  0x78, 0x68, 0x6b, 0x6d, 0x66, 0xa1, 0x4c, 0x03, 0x5b, 0xbf, 0x93, 0xa9,
  0xb6, 0xc2, 0xe1, 0x78, 0x2b, 0x8b, 0xce, 0x4e, 0x2b, 0xef, 0x7b, 0xce,
  0xd6, 0x93, 0x18, 0x63, 0x96, 0x27, 0xf3, 0xa3, 0x88, 0xd7, 0xea, 0x9e,
  0x5e, 0xb8, 0x61, 0x76, 0xaa, 0x4f, 0xbb, 0x98, 0x94, 0xfc, 0xb3, 0x05,
  0x62, 0x60, 0x99, 0x43, 0x03, 0x69, 0x99, 0x34, 0x5a, 0x53, 0x11, 0x96,
  0x9f, 0x2c, 0x80, 0x99, 0x85, 0xfc, 0xde, 0x8a, 0xdc, 0xab, 0x11, 0x3c,
  0x4f, 0x32, 0x3d, 0xa3, 0x1a, 0xbb, 0xca, 0xb4, 0xdd, 0xe1, 0x53, 0xef,
  0x9c, 0xa4, 0xd4, 0xd4, 0xbc, 0xbe, 0xf0, 0xe9, 0x68, 0xf7, 0xb5, 0x8c,
  0x43, 0x62, 0x55, 0xc8, 0xd2, 0x73, 0x94, 0x89, 0xe6, 0x24, 0x7a, 0xfe,
  0x94, 0xaf, 0xd2, 0xd2, 0xab, 0xf7, 0xf2, 0x5d, 0xe6, 0x0e, 0x6d, 0xdd,
  0x35, 0xc8, 0x4a, 0x08, 0xac, 0x62, 0x50, 0xdb, 0x86, 0xa0, 0x69, 0xa5,
  0xe7, 0xab, 0x66, 0x92, 0x5b, 0x31, 0x67, 0x41, 0x11, 0xc1, 0x96, 0x0e,
  0x19, 0xb7, 0xf8, 0x5e, 0xa4, 0xe0, 0xc0, 0x01, 0x4e, 0x38, 0x93, 0xfd,
  0xe5, 0x79, 0x87, 0x30, 0xd3, 0x75, 0xfb, 0x7e, 0x9f, 0xb4, 0xa9, 0x98,
  0xc0, 0xe2, 0xe4, 0xda, 0x6f, 0x00, 0x75, 0xe8, 0x57, 0x60, 0xe3, 0x15,
  0xe7, 0xb5, 0x9c, 0x27, 0xaa, 0x1a, 0x0c, 0x3b, 0x0f, 0x94, 0xc9, 0x36,
  0x42, 0xed, 0xd0, 0x63, 0xa7, 0x90, 0xb6, 0x5f, 0xf3, 0x81, 0xb2, 0xfc,
  0x2d, 0xad, 0x7d, 0x9e, 0x02, 0x67, 0xb6, 0x76, 0x11, 0x91, 0xc9, 0x6f,
  0x1c, 0xa5, 0x35, 0xa1, 0x15, 0xf5, 0x8e, 0x0d, 0x66, 0x30, 0xe3, 0x99,
  0x91, 0xda, 0x46, 0x4f, 0xe4, 0x08, 0xa5, 0xe3, 0x15, 0xb4, 0x1d, 0x09,
  0xed, 0x46, 0x63, 0x2d, 0x3a, 0x8a, 0x87, 0x49, 0x7e, 0xac, 0x5e, 0xd8,
  0xc1, 0x9d, 0x1a, 0x11, 0x95, 0x60, 0xa8, 0xdf, 0xc8, 0x68, 0xe0, 0xea,
  0x6c, 0xb4, 0x6e, 0xbe, 0xc3, 0x93, 0xcd, 0x1b, 0xe8, 0xc9, 0x15, 0x2b,
  0xf5, 0x57, 0x2a, 0xc3, 0xd4, 0x77, 0xf2, 0x25, 0x09, 0x7b, 0x9c, 0x2d,
  0xb7, 0x1d, 0x97, 0xdb, 0x36, 0x60, 0xf9, 0x18, 0x88, 0x05, 0xf1, 0xaf,
  0xbd, 0x1c, 0x4b, 0xea, 0x96, 0x94, 0x17, 0x09, 0xca, 0xa2, 0x44, 0xfa,
  0x8c, 0x18, 0x97, 0x29, 0xad, 0x91, 0x98, 0xd8, 0x1f, 0xb3, 0xb6, 0x32,
  0x30, 0x6e, 0x56, 0xef, 0x60, 0xde, 0x7d, 0x2a, 0xad, 0xe2, 0xc1, 0xe0,
  0x82, 0x9c, 0x25, 0xfb, 0xd8, 0xee, 0x28, 0xc0, 0xb4, 0x14, 0x25, 0xfc,
  0x5d, 0x3f, 0x4b, 0xe1, 0x1f, 0x73, 0x53, 0x71, 0x27, 0x2c, 0x49, 0x7a,
  0x89, 0x76, 0x77, 0x90, 0xf8, 0xf8, 0x37, 0x01, 0xe1, 0x69, 0x7b, 0xb7,
  0x75, 0xbb, 0xc8, 0xd2, 0x0a, 0x06, 0x6a, 0xbe, 0xf9, 0xa7, 0x04, 0x43,
  0xd1, 0x8a, 0x8a, 0x20, 0xf2, 0x7b, 0x59, 0x1b, 0x78, 0xb9, 0x50, 0x9c,
  0x26, 0x45, 0xab, 0x3c, 0x1c, 0xde, 0x50, 0x34, 0xfe, 0xb9, 0xdc, 0xf1,
  0xf5, 0xe7, 0x37, 0x18, 0x47, 0x4e, 0x4c, 0x51, 0xe1, 0xd4, 0xad, 0x25,
  0xd7, 0x2e, 0x77, 0xe5, 0xf5, 0xa7, 0x7e, 0x48, 0xb5, 0x5e, 0xa5, 0xd2,
  0x62, 0x7d, 0x9f, 0xb8, 0xa9, 0xe8, 0xb9, 0xe7, 0x12, 0x6f, 0x4d, 0x92,
  0x5e, 0x1a, 0x15, 0x6c, 0x13, 0x69, 0x5e, 0x71, 0xc1, 0x56, 0x8c, 0xa3,
  0x7d, 0x3a, 0x9e, 0xe5, 0xef, 0xda, 0x67, 0x38, 0x46, 0x72, 0x3d, 0xb7,
  0x81, 0xa7, 0x0d, 0x62, 0x3e, 0x81, 0x33, 0x07, 0x5e, 0x8f, 0x51, 0xf7,
  0x7f, 0xca, 0xca, 0xc2, 0x7d, 0x92, 0x1d, 0x8a, 0xa2, 0x99, 0x41, 0x69,
  0x7a, 0x74, 0xee, 0x1a, 0x24, 0xd8, 0x70, 0x7d, 0xe4, 0x0f, 0x31, 0x08,
  0xa2, 0x1e, 0x7e, 0x6f, 0x3a, 0x55, 0xc8, 0xb7, 0x62, 0x10, 0xac, 0x1f,
  0xf6, 0xea, 0x3c, 0x98, 0x73, 0x00, 0xa7, 0x98, 0x71, 0xf8, 0xee, 0x6b,
  0x12, 0x3f, 0xda, 0x25, 0x57, 0xd2, 0x69, 0xb1, 0x78, 0x4a, 0x79, 0xc4,
  0x75, 0xfb, 0x71, 0xe9, 0x1e, 0x78, 0x9a, 0x4b, 0x8d, 0xb4, 0x3d, 0xa5,
  0x68, 0xe8, 0x2e, 0xe3, 0x60, 0xb2, 0x5c, 0x87, 0x39, 0xa2, 0x78, 0xc2,
  0xd4, 0xae, 0xfc, 0xb7, 0x2a, 0x23, 0x9d, 0x6f, 0x17, 0x85, 0x64, 0x08,
  0x69, 0x25, 0xc0, 0xbd, 0x9f, 0x13, 0x9c, 0x9f, 0x22, 0x26, 0xe4, 0xe6,
  0x3b, 0xf3, 0x5f, 0x31, 0xda, 0xb0, 0xa4, 0x14, 0x41, 0x2d, 0x6f, 0x27,
  0x51, 0x31, 0x76, 0x71, 0xde, 0xc1, 0xfa, 0xf2, 0xa8, 0xd9, 0x29, 0xa4,
  0xf7, 0xb1, 0x1e, 0xee, 0x12, 0x78, 0x99, 0x3c, 0xc1, 0x51, 0xd8, 0xae,
  0x2f, 0xc8, 0x96, 0x3b, 0x9c, 0x59, 0x8f, 0x59, 0xa6, 0xb7, 0xaa, 0x98,
  0x15, 0xa5, 0xb1, 0x71, 0x84, 0xea, 0x05, 0x9a, 0x44, 0x7c, 0xaf, 0xc4,
  0x9d, 0xf9, 0xe9, 0x53, 0x18, 0x99, 0xf1, 0x7e, 0x24, 0x74, 0x13, 0xe7,
  0x3b, 0x74, 0x4f, 0xa1, 0xfc, 0x62, 0x80, 0xcd, 0x80, 0xa1, 0xf7, 0x39,
  0xa3, 0x38, 0xeb, 0x6a, 0x35, 0x1a, 0xbb, 0xae, 0xe2, 0x68, 0xaa, 0x07,
  0xaf, 0x23, 0xb5, 0x72, 0x58, 0x29, 0x2f, 0xa3, 0x7d, 0x86, 0x48, 0x14,
  0xe8, 0x35, 0x23, 0x0f, 0x84, 0xa7, 0x34, 0x8b, 0xb8, 0xdf, 0x95, 0x5c,
  0xfa, 0x12, 0x53, 0x21, 0x7f, 0x6d, 0xc2, 0x07, 0xd3, 0xf2, 0x6d, 0x42,
  0x56, 0xa9, 0x57, 0x60, 0xbb, 0x9f, 0x72, 0xac, 0x76, 0xd0, 0xb7, 0xc8,
  0x52, 0xb3, 0x26, 0x27, 0x22, 0xf2, 0x8e, 0x93, 0x37, 0xfa, 0x67, 0xdd,
  0xe6, 0x19, 0x12, 0x89, 0xe7, 0x00, 0x03, 0x3a, 0xf2, 0xdd, 0xbf, 0x6e,
  0x54, 0xe6, 0x08, 0xbc, 0x6a, 0x60, 0x93, 0x0f, 0x83, 0x8b, 0x22, 0x65,
  0xdf, 0x27, 0x65, 0xd5, 0xc7, 0xed, 0xfe, 0xc9, 0x7b, 0xab, 0xa2, 0xc2,
  0x75, 0x32, 0x60, 0x60, 0x43, 0x03, 0xf5, 0xd9, 0xd7, 0x21, 0x41, 0xf0,
  0x6d, 0x90, 0x3f, 0x15, 0x83, 0x26, 0x65, 0x99, 0x80, 0x37, 0x1f, 0xed,
  0x03, 0x5e, 0xa0, 0x14, 0x57, 0x4d, 0x38, 0xbf, 0x7b, 0xcf, 0x4b, 0x52,
  0x00, 0x7a, 0x84, 0x65, 0x91, 0xd7, 0x0f, 0x79, 0xc0, 0x8a, 0xbe, 0x07,
  0x3d, 0x79, 0x47, 0xf6, 0x45, 0x37, 0xa8, 0xbc, 0x59, 0xf3, 0xbf, 0x19,
  0x48, 0x7b, 0x09, 0x91, 0x0e, 0xf7, 0x01, 0xee, 0x2c, 0x4e, 0x8f, 0x3e,
  0xe0, 0x7e, 0x76, 0x72, 0x44, 0xa3, 0x34, 0xc2, 0xd9, 0x93, 0xcc, 0xa9,
  0x25, 0x82, 0x71, 0x66, 0x49, 0xb5, 0x06, 0xac, 0x48, 0xfa, 0x12, 0xab,
  0xab, 0xa2, 0xe5, 0xbb, 0xef, 0x04, 0xbb, 0x0b, 0x25, 0xe4, 0x66, 0x48,
  0x66, 0x16, 0x21, 0x49, 0x5f, 0x63, 0x84, 0x01, 0x0f, 0x59, 0x04, 0x70,
  0x82, 0x5f, 0xd3, 0xeb, 0xe3, 0x3a, 0x23, 0x58, 0x84, 0x17, 0x2c, 0xa5,
  0x36, 0xbb, 0xe1, 0x70, 0x5e, 0x58, 0x70, 0xfd, 0xe0, 0xca, 0x73, 0xbb,
  0x63, 0x59, 0x05, 0x36, 0x71, 0x81, 0x2c, 0x3a, 0x10, 0x87, 0xd8, 0xa9,
  0xd3, 0x24, 0x01, 0x04, 0x60, 0x3c, 0xf1, 0x49, 0x68, 0xea, 0x08, 0xf9,
  0xf5, 0x77, 0xae, 0x34, 0x19, 0x9d, 0xe0, 0x2b, 0xca, 0xdf, 0x13, 0x52,
  0x0f, 0x4c, 0xa4, 0xe5, 0x5c, 0x4f, 0xa8, 0xdb, 0x6e, 0x68, 0x15, 0xdc,
  0x4a, 0x13, 0xc7, 0xc3, 0x64, 0x5d, 0xbf, 0x2b, 0xd5, 0x48, 0x38, 0x8a,
  0xa1, 0x7d, 0xbb, 0x77, 0xfa, 0xbd, 0x89, 0xbe, 0x4c, 0x7e, 0xf7, 0x5d,
  0x1e, 0x84, 0x06, 0x3a, 0xd5, 0xd0, 0xa5, 0xe0, 0x98, 0x85, 0x5b, 0x3d,
  0xe4, 0x19, 0xc4, 0x82, 0xd3, 0x92, 0x3c, 0x18, 0xfb, 0x5a, 0x27, 0x66,
  0xf0, 0x3d, 0xb2, 0x3f, 0x2e, 0x7b, 0x73, 0x12, 0xdd, 0x6f, 0x87, 0xa0,
  0xb6, 0xcd, 0x6b, 0xce, 0x5f, 0x96, 0x78, 0xb8, 0x5b, 0x15, 0xf7, 0x9c,
  0x8c, 0xee, 0xbf, 0x0b, 0x5e, 0xe3, 0x54, 0x32, 0xa3, 0x27, 0x22, 0x6c,
  0xac, 0x79, 0x01, 0x29, 0xc1, 0xde, 0xed, 0x40, 0x6d, 0xb5, 0x34, 0x78,
  0xd4, 0xe2, 0xef, 0xf5, 0xd0, 0x14, 0xf6, 0x22, 0xe1, 0xcc, 0x86, 0x65,
  0x7d, 0xce, 0x45, 0x8a, 0xfa, 0x00, 0x4d, 0x3a, 0x8f, 0xb9, 0xdc, 0xfe,
  0xd2, 0xbe, 0x70, 0x58, 0x5b, 0x39, 0x5a, 0x6d, 0x05, 0x0d, 0xb5, 0x19,
  0x9c, 0xe8, 0x7d, 0x9d, 0xa1, 0xa4, 0x09, 0x76, 0x2e, 0xd1, 0x63, 0xcb,
  0xc1, 0x23, 0x03, 0xd1, 0x6f, 0xc3, 0xf2, 0xcb, 0xe1, 0x2e, 0x0d, 0x20,
  0xa0, 0x7e, 0xd1, 0x82, 0xa0, 0xf2, 0xd7, 0xf2, 0x4b, 0x4d, 0x2a, 0xbd,
  0x20, 0x71, 0x41, 0x7c, 0x45, 0xe4, 0x72, 0xeb, 0xaf, 0x7c, 0xaa, 0xd7,
  0xe8, 0x85, 0xcd, 0xd5, 0xa6, 0x8e, 0x2b, 0x0a, 0xd8, 0x8d, 0xa3, 0xac,
  0xb4, 0x66, 0x46, 0x59, 0x3e, 0xde, 0x3e, 0x2a, 0xd2, 0x97, 0xa3, 0xda,
  0x46, 0x4d, 0x27, 0xa6, 0xbf, 0x72, 0xca, 0xf5, 0xbc, 0xb7, 0xdd, 0x4b,
  0xd4, 0x1b, 0xed, 0x7f, 0xcc, 0xeb, 0x3e, 0xbe, 0xe8, 0x12, 0x2e, 0xab,
  0x0f, 0x62, 0xf7, 0x42, 0xa3, 0x00, 0x74, 0x32, 0x56, 0xba, 0x32, 0xdc,
  0xfb, 0x59, 0xc0, 0x2e, 0x56, 0x7f, 0x7c, 0x13, 0xb8, 0xe9, 0x97, 0xd7,
  0x16, 0x0e, 0x3b, 0x91, 0x25, 0xf2, 0xcb, 0x86, 0xfe, 0x59, 0xbe, 0x5e,
  0x3b, 0x41, 0x7c, 0x71, 0x64, 0xe9, 0xeb, 0x79, 0x16, 0x4c, 0x56, 0x61,
  0x27, 0xf2, 0xc8, 0xdc, 0x65, 0x21, 0xef, 0xfe, 0x74, 0x33, 0x7a, 0xd6,
  0xe7, 0x88, 0xc7, 0x0b, 0x06, 0xcd, 0x7c, 0x48, 0xd5, 0x75, 0xbb, 0x3c,
  0x93, 0xc9, 0x49, 0x4b, 0x21, 0x92, 0xab, 0xf7, 0x76, 0xd0, 0x9d, 0xb1,
  0xcb, 0xeb, 0x53, 0x2d, 0xe2, 0xca, 0xe5, 0xa8, 0x07, 0x39, 0xed, 0xeb,
  0xc8, 0x7c, 0x6a, 0xfe, 0xa5, 0x0e, 0x93, 0x00, 0x39, 0x2a, 0x1f, 0xb2,
  0xd5, 0xad, 0x67, 0xb7, 0x1a, 0xc9, 0x57, 0xd2, 0xdd, 0x71, 0x15, 0x2e,
  0x41, 0x2d, 0x32, 0xee, 0xb8, 0xf9, 0xe1, 0x66, 0x3a, 0xd1, 0xda, 0x6d,
  0xa5, 0x1a, 0x5f, 0xb8, 0xc0, 0x34, 0xf5, 0x23, 0xfe, 0xee, 0xaf, 0xac,
  0x4f, 0x7b, 0x19, 0x7a, 0x2b, 0x78, 0x6c, 0xd7, 0x50, 0x80, 0xc9, 0xeb,
  0x08, 0x99, 0x3b, 0x65, 0x1f, 0xc6, 0x4c, 0x1f, 0x9c, 0x26, 0xc5, 0x7b,
  0xa7, 0x10, 0x57, 0xb2, 0xee, 0xe3, 0x61, 0x94, 0xf7, 0x1a, 0x5a, 0xe4,
  0xb6, 0xec, 0xc5, 0x2f, 0xf9, 0x24, 0xd5, 0x36, 0x71, 0xb5, 0x4a, 0xb1,
  0xcc, 0x9b, 0x3d, 0x2f, 0x2a, 0x00, 0x84, 0x90, 0xfb, 0xc8, 0x26, 0x26,
  0x8a, 0x36, 0x2c, 0x40, 0x13, 0x16, 0xce, 0x10, 0x0a, 0xe4, 0xd3, 0xa1,
  0xab, 0x2c, 0xc2, 0xd2, 0x6a, 0x78, 0x6b, 0x9d, 0xa4, 0xd8, 0x70, 0x74,
  0x02, 0x5b, 0xf8, 0xa3, 0x24, 0xc9, 0xca, 0xe5, 0x06, 0x90, 0xfe, 0x9b,
  0x87, 0xd0, 0xaa, 0xd1, 0x0c, 0x8b, 0x7f, 0x8e, 0xb6, 0xf9, 0xb1, 0xae,
  0xbe, 0x1c, 0x0a, 0x55, 0xef, 0xb8, 0x65, 0x7c, 0x98, 0xce, 0x60, 0x17,
  0xa3, 0x3d, 0x1b, 0xc4, 0xf7, 0x97, 0x9a, 0xca, 0xcf, 0x14, 0x3d, 0x0a,
  0x3a, 0x8c, 0xed, 0x5d, 0x6a, 0x3d, 0xc1, 0x02, 0x57, 0x49, 0xc2, 0xd7,
  0x9f, 0xa3, 0x0a, 0x9b, 0x05, 0x79, 0x99, 0x3b, 0xf8, 0x04, 0x75, 0x16,
  0x3c, 0xb1, 0x90, 0x2c, 0x48, 0xe4, 0x3e, 0x01, 0x13, 0xaa, 0x71, 0x9e,
  0x19, 0xaf, 0xc7, 0x8b, 0x5a, 0x01, 0xd2, 0x07, 0x77, 0x9a, 0x59, 0x9f,
  0x82, 0x7a, 0x2e, 0x93, 0xbe, 0x87, 0x5e, 0x44, 0x42, 0x52, 0x74, 0x1a,
  0xf7, 0x42, 0x1b, 0x3e, 0x6b, 0xfc, 0xb6, 0xc8, 0xb9, 0xeb, 0x37, 0xfb,
  0xf2, 0xd2, 0x90, 0x9a, 0xed, 0xb0, 0x8d, 0xc0, 0xf8, 0x98, 0xf9, 0xce,
  0x55, 0xfd, 0x8e, 0x41, 0xa5, 0x7d, 0x17, 0x18, 0x1e, 0x7a, 0xf0, 0xd6,
  0x06, 0x81, 0xda, 0x1d, 0x91, 0x7f, 0x86, 0xce, 0xf5, 0x75, 0x1d, 0x29,
  0x3f, 0x9f, 0x8e, 0xe9, 0x7d, 0x94, 0x7b, 0x39, 0x73, 0xe8, 0x0b, 0xc3,
  0xd9, 0x03, 0xce, 0x4d, 0x43, 0x1d, 0xa6, 0xb4, 0x6a, 0x76, 0xcb, 0x11,
  0x45, 0x98, 0xd5, 0x4a, 0x2c, 0x31, 0x2b, 0x62, 0x3d, 0xfd, 0x7a, 0x0e,
  0x2b, 0xd1, 0x8f, 0x09, 0x68, 0x6b, 0xab, 0xe0, 0x39, 0xfe, 0xfb, 0xe2,
  0xe8, 0xdd, 0xc2, 0xf0, 0x75, 0xa1, 0x52, 0xb2, 0xf6, 0xb2, 0x21, 0x32,
  0x56, 0xd7, 0xef, 0xb4, 0xb4, 0xb5, 0x6b, 0x8c, 0x1a, 0x0c, 0x09, 0x8d,
  0xf3, 0xc5, 0xe2, 0xc5, 0xdb, 0x2d, 0xd3, 0x65, 0xdb, 0x78, 0x1c, 0xb5,
  0x7f, 0x06, 0x64, 0xf7, 0x02, 0xcd, 0xc6, 0x39, 0x73, 0xdb, 0x65, 0x6d,
  0xa0, 0x52, 0x25, 0x26, 0xee, 0x31, 0xa0, 0xd1, 0x79, 0x56, 0x0b, 0x7c,
  0x1e, 0xb5, 0x54, 0x19, 0xc2, 0x57, 0x41, 0x66, 0xbe, 0xdc, 0x46, 0x1b,
  0xd1, 0x10, 0x59, 0x07, 0x21, 0xf0, 0xa1, 0xf4, 0x69, 0x73, 0x40, 0x09,
  0xdd, 0xec, 0x10, 0x91, 0x94, 0x22, 0x90, 0xba, 0x0d, 0x14, 0xfe, 0xf6,
  0x26, 0x23, 0xca, 0x48, 0x04, 0xd4, 0x9f, 0xd3, 0xa5, 0x87, 0xfc, 0xfa,
  0x19, 0x57, 0x1e, 0x78, 0xe2, 0xea, 0x5c, 0xc7, 0x48, 0x07, 0x9b, 0xda,
  0xe7, 0x2c, 0x7d, 0xb2, 0x9c, 0xae, 0x7c, 0x2b, 0x64, 0x1f, 0x38, 0x65,
  0xcc, 0x40, 0xaf, 0xe1, 0xa9, 0x92, 0x2d, 0x41, 0xca, 0x71, 0x62, 0x47,
  0xdf, 0xf8, 0x76, 0xd6, 0x5e, 0x00, 0x7a, 0x25, 0x17, 0x02, 0xe4, 0x3a,
  0x79, 0x07, 0x69, 0x87, 0x4e, 0xf3, 0x76, 0x46, 0x4c, 0xdf, 0x59, 0x48,
  0x32, 0x46, 0x6f, 0xc2, 0x11, 0xd4, 0x7e, 0xb5, 0x23, 0xdd, 0x75, 0xeb,
  0x0b, 0xe5, 0x95, 0x93, 0x7b, 0xd5, 0x28, 0x73, 0x06, 0xc8, 0x64, 0x1a,
  0xf6, 0xb6, 0xda, 0x7f, 0xd7, 0x24, 0xba, 0x6e, 0x6a, 0x1e, 0x47, 0x24,
  0x47, 0x13, 0xc3, 0xac, 0x6e, 0x3d, 0x02, 0xa9, 0xc2, 0x5a, 0x88, 0x3b,
  0xb6, 0xe7, 0x91, 0x66, 0x27, 0xaa, 0xe7, 0xd6, 0x43, 0xc4, 0xcf, 0x35,
  0x70, 0xf6, 0x5a, 0x5a, 0x79, 0xb7, 0x92, 0x4a, 0x4d, 0x26, 0x59, 0x16,
  0xe7, 0x37, 0x38, 0xf2, 0x70, 0xd9, 0x6e, 0x7b, 0x3e, 0xc9, 0xd9, 0x80,
  0xa5, 0x3c, 0xb5, 0x25, 0xa1, 0xf6, 0x84, 0xf6, 0x12, 0x73, 0x88, 0xa8,
  0x2d, 0x33, 0xaf, 0x09, 0x07, 0x9e, 0x9f, 0x31, 0x44, 0x77, 0x5c, 0x7b,
  0xb1, 0xcc, 0xbb, 0xfe, 0xc8, 0x4e, 0x8d, 0x95, 0x77, 0x1a, 0x7f, 0x35,
  0xa0, 0x5d, 0xc7, 0xd4, 0x1d, 0x18, 0x91, 0x9c, 0xd0, 0x96, 0xda, 0xd1,
  0x04, 0xd8, 0x5b, 0x2f, 0xb8, 0x92, 0x2f, 0x8c, 0xc3, 0xc3, 0x7d, 0xf2,
  0xee, 0x3f, 0x63, 0x6c, 0x8c, 0xe6, 0xf2, 0x1f, 0xcc, 0x0b, 0xb2, 0xf3,
  0xd9, 0x9c, 0xd5, 0xe7, 0x89, 0x9e, 0xf7, 0xf0, 0x25, 0xee, 0xd6, 0x80,
  0x63, 0xda, 0x2e, 0x8a, 0xc6, 0x80, 0x5c, 0xdb, 0x6d, 0x8b, 0xa6, 0x19,
  0x42, 0x43, 0x0e, 0x3a, 0xee, 0x95, 0xb1, 0xc3, 0xdd, 0x9a, 0xab, 0x30,
  0x50, 0x0c, 0x3b, 0xbe, 0xe4, 0x13, 0x37, 0xd0, 0x5c, 0x70, 0xe5, 0x25,
  0x3c, 0x0a, 0x2f, 0x51, 0x00, 0xc0, 0x25, 0xab, 0xaf, 0x93, 0x80, 0x49,
  0xa6, 0x3d, 0x95, 0x0c, 0x18, 0x5f, 0x46, 0x71, 0x28, 0x05, 0x76, 0xde,
  0xb4, 0x88, 0x88, 0xa2, 0x33, 0x2e, 0x75, 0x0d, 0xd7, 0x51, 0x11, 0x8b,
  0xf7, 0xc5, 0xab, 0x5f, 0xad, 0x41, 0x89, 0xb2, 0x44, 0x6f, 0x5f, 0x65,
  0x29, 0x48, 0xd6, 0xa9, 0xc5, 0x5f, 0x07, 0x2c, 0x9a, 0x4d, 0x6f, 0xec,
  0x28, 0x79, 0x8f, 0x3f, 0x57, 0x50, 0xfd, 0xf0, 0x7e, 0xd9, 0x4d, 0x22,
  0xe8, 0x6a, 0x32, 0xa8, 0x52, 0x4c, 0x92, 0x43, 0x6a, 0xab, 0x19, 0x84,
  0x5d, 0x2d, 0x69, 0xbf, 0xac, 0x71, 0x56, 0x07, 0xa6, 0xf6, 0xb9, 0x9b,
  0xfa, 0x62, 0x71, 0x59, 0x56, 0xd6, 0xe1, 0x9c, 0xbe, 0x3a, 0x21, 0x90,
  0x43, 0xb3, 0xa3, 0x34, 0x9a, 0xe9, 0x97, 0x68, 0xfb, 0xa0, 0x7e, 0xaf,
  0xd0, 0xe1, 0x46, 0xe3, 0x92, 0x04, 0x98, 0x8b, 0x67, 0x19, 0x6b, 0x3d,
  0xcc, 0x9f, 0xfa, 0xc1, 0xe1, 0x69, 0xa0, 0x62, 0xa7, 0x02, 0x35, 0x10,
  0xf2, 0x53, 0xd2, 0xc4, 0x67, 0xf8, 0x56, 0xd3, 0x29, 0xab, 0xf7, 0x9f,
  0xdf, 0x21, 0xe0, 0x5d, 0x4d, 0x46, 0x5a, 0xa0, 0x20, 0xfe, 0x2b, 0x96,
  0x54, 0x65, 0xbe, 0xcd, 0x85, 0x34, 0x3c, 0xca, 0xa5, 0xdc, 0xcb, 0x97,
  0x5d, 0x54, 0x0f, 0x54, 0xfd, 0xad, 0xa0, 0x59, 0xe3, 0x34, 0xc7, 0x61,
  0x5f, 0xe7, 0x34, 0xb1, 0x29, 0x7d, 0x89, 0xf1, 0xa6, 0xe1, 0x76, 0x02,
  0x36, 0x20, 0x52, 0xd7, 0xaf, 0xc6, 0x2b, 0xee, 0xeb, 0x1b, 0x65, 0xb8,
  0x7f, 0x03, 0x05, 0x08, 0xa3, 0xee, 0x69, 0x49, 0x44, 0x01, 0x1d, 0xa8,
  0x75, 0x0e, 0x58, 0xd0, 0x37, 0x2e, 0x2a, 0xd9, 0x06, 0x54, 0xb3, 0x61,
  0x06, 0xf0, 0xc0, 0xe7, 0x9e, 0x40, 0x76, 0xa0, 0xcb, 0x39, 0x3d, 0x6c,
  0xc7, 0x7c, 0x41, 0xbb, 0xdd, 0xa7, 0x27, 0xb6, 0x9f, 0xb4, 0xf4, 0xcb,
  0xe4, 0xfe, 0x0d, 0xaf, 0x3d, 0x5a, 0xce, 0x28, 0xc7, 0x5e, 0x43, 0x39,
  0x51, 0xe5, 0x2e, 0x7b, 0x59, 0x25, 0x1f, 0xca, 0x42, 0xfa, 0x23, 0xaa,
  0xf3, 0x58, 0x33,
]).buffer;

const GENERATION_POLYNOMIALS = [
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 0, 0),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 0, 1),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 1, 2),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 3, 3),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 6, 4),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 10, 5),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 15, 6),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 21, 7),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 28, 8),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 36, 9),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 45, 10),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 55, 11),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 66, 12),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 78, 13),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 91, 14),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 105, 15),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 120, 16),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 136, 17),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 153, 18),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 171, 19),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 190, 20),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 210, 21),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 231, 22),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 253, 23),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 276, 24),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 300, 25),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 325, 26),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 351, 27),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 378, 28),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 406, 29),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 435, 30),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 465, 31),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 496, 32),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 528, 33),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 561, 34),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 595, 35),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 630, 36),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 666, 37),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 703, 38),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 741, 39),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 780, 40),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 820, 41),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 861, 42),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 903, 43),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 946, 44),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 990, 45),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 1035, 46),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 1081, 47),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 1128, 48),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 1176, 49),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 1225, 50),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 1275, 51),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 1326, 52),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 1378, 53),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 1431, 54),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 1485, 55),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 1540, 56),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 1596, 57),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 1653, 58),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 1711, 59),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 1770, 60),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 1830, 61),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 1891, 62),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 1953, 63),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 2016, 64),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 2080, 65),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 2145, 66),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 2211, 67),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 2278, 68),
  new Uint8Array(GENERATION_POLYNOMIALS_BUF, 2346, 69)
];

// prettier-ignore
const EC_BYTES_PER_BLOCK: Table<number> = [
  [7, 10, 13, 17],  // 1
  [10, 16, 22, 28], // 2
  [15, 26, 18, 22], // 3
  [20, 18, 26, 16], // 4
  [26, 24, 18, 22], // 5
  [18, 16, 24, 28], // 6
  [20, 18, 18, 26], // 7
  [24, 22, 22, 26], // 8
  [30, 22, 20, 24], // 9
  [18, 26, 24, 28], // 10
  [20, 30, 28, 24], // 11
  [24, 22, 26, 28], // 12
  [26, 22, 24, 22], // 13
  [30, 24, 20, 24], // 14
  [22, 24, 30, 24], // 15
  [24, 28, 24, 30], // 16
  [28, 28, 28, 28], // 17
  [30, 26, 28, 28], // 18
  [28, 26, 26, 26], // 19
  [28, 26, 30, 28], // 20
  [28, 26, 28, 30], // 21
  [28, 28, 30, 24], // 22
  [30, 28, 30, 30], // 23
  [30, 28, 30, 30], // 24
  [26, 28, 30, 30], // 25
  [28, 28, 28, 30], // 26
  [30, 28, 30, 30], // 27
  [30, 28, 30, 30], // 28
  [30, 28, 30, 30], // 29
  [30, 28, 30, 30], // 30
  [30, 28, 30, 30], // 31
  [30, 28, 30, 30], // 32
  [30, 28, 30, 30], // 33
  [30, 28, 30, 30], // 34
  [30, 28, 30, 30], // 35
  [30, 28, 30, 30], // 36
  [30, 28, 30, 30], // 37
  [30, 28, 30, 30], // 38
  [30, 28, 30, 30], // 39
  [30, 28, 30, 30], // 40
];

type Tuple4 = [number, number, number, number];
// prettier-ignore
const DATA_BYTES_PER_BLOCK: Table<Tuple4> = [
  [[19, 1, 0, 0], [16, 1, 0, 0], [13, 1, 0, 0], [9, 1, 0, 0]], // 1
  [[34, 1, 0, 0], [28, 1, 0, 0], [22, 1, 0, 0], [16, 1, 0, 0]], // 2
  [[55, 1, 0, 0], [44, 1, 0, 0], [17, 2, 0, 0], [13, 2, 0, 0]], // 3
  [[80, 1, 0, 0], [32, 2, 0, 0], [24, 2, 0, 0], [9, 4, 0, 0]], // 4
  [[108, 1, 0, 0], [43, 2, 0, 0], [15, 2, 16, 2], [11, 2, 12, 2]], // 5
  [[68, 2, 0, 0], [27, 4, 0, 0], [19, 4, 0, 0], [15, 4, 0, 0]], // 6
  [[78, 2, 0, 0], [31, 4, 0, 0], [14, 2, 15, 4], [13, 4, 14, 1]], // 7
  [[97, 2, 0, 0], [38, 2, 39, 2], [18, 4, 19, 2], [14, 4, 15, 2]], // 8
  [[116, 2, 0, 0], [36, 3, 37, 2], [16, 4, 17, 4], [12, 4, 13, 4]], // 9
  [[68, 2, 69, 2], [43, 4, 44, 1], [19, 6, 20, 2], [15, 6, 16, 2]], // 10
  [[81, 4, 0, 0], [50, 1, 51, 4], [22, 4, 23, 4], [12, 3, 13, 8]], // 11
  [[92, 2, 93, 2], [36, 6, 37, 2], [20, 4, 21, 6], [14, 7, 15, 4]], // 12
  [[107, 4, 0, 0], [37, 8, 38, 1], [20, 8, 21, 4], [11, 12, 12, 4]], // 13
  [[115, 3, 116, 1], [40, 4, 41, 5], [16, 11, 17, 5], [12, 11, 13, 5]], // 14
  [[87, 5, 88, 1], [41, 5, 42, 5], [24, 5, 25, 7], [12, 11, 13, 7]], // 15
  [[98, 5, 99, 1], [45, 7, 46, 3], [19, 15, 20, 2], [15, 3, 16, 13]], // 16
  [[107, 1, 108, 5], [46, 10, 47, 1], [22, 1, 23, 15], [14, 2, 15, 17]], // 17
  [[120, 5, 121, 1], [43, 9, 44, 4], [22, 17, 23, 1], [14, 2, 15, 19]], // 18
  [[113, 3, 114, 4], [44, 3, 45, 11], [21, 17, 22, 4], [13, 9, 14, 16]], // 19
  [[107, 3, 108, 5], [41, 3, 42, 13], [24, 15, 25, 5], [15, 15, 16, 10]], // 20
  [[116, 4, 117, 4], [42, 17, 0, 0], [22, 17, 23, 6], [16, 19, 17, 6]], // 21
  [[111, 2, 112, 7], [46, 17, 0, 0], [24, 7, 25, 16], [13, 34, 0, 0]], // 22
  [[121, 4, 122, 5], [47, 4, 48, 14], [24, 11, 25, 14], [15, 16, 16, 14]], // 23
  [[117, 6, 118, 4], [45, 6, 46, 14], [24, 11, 25, 16], [16, 30, 17, 2]], // 24
  [[106, 8, 107, 4], [47, 8, 48, 13], [24, 7, 25, 22], [15, 22, 16, 13]], // 25
  [[114, 10, 115, 2], [46, 19, 47, 4], [22, 28, 23, 6], [16, 33, 17, 4]], // 26
  [[122, 8, 123, 4], [45, 22, 46, 3], [23, 8, 24, 26], [15, 12, 16, 28]], // 27
  [[117, 3, 118, 10], [45, 3, 46, 23], [24, 4, 25, 31], [15, 11, 16, 31]], // 28
  [[116, 7, 117, 7], [45, 21, 46, 7], [23, 1, 24, 37], [15, 19, 16, 26]], // 29
  [[115, 5, 116, 10], [47, 19, 48, 10], [24, 15, 25, 25], [15, 23, 16, 25]], // 30
  [[115, 13, 116, 3], [46, 2, 47, 29], [24, 42, 25, 1], [15, 23, 16, 28]], // 31
  [[115, 17, 0, 0], [46, 10, 47, 23], [24, 10, 25, 35], [15, 19, 16, 35]], // 32
  [[115, 17, 116, 1], [46, 14, 47, 21], [24, 29, 25, 19], [15, 11, 16, 46]], // 33
  [[115, 13, 116, 6], [46, 14, 47, 23], [24, 44, 25, 7], [16, 59, 17, 1]], // 34
  [[121, 12, 122, 7], [47, 12, 48, 26], [24, 39, 25, 14], [15, 22, 16, 41]], // 35
  [[121, 6, 122, 14], [47, 6, 48, 34], [24, 46, 25, 10], [15, 2, 16, 64]], // 36
  [[122, 17, 123, 4], [46, 29, 47, 14], [24, 49, 25, 10], [15, 24, 16, 46]], // 37
  [[122, 4, 123, 18], [46, 13, 47, 32], [24, 48, 25, 14], [15, 42, 16, 32]], // 38
  [[117, 20, 118, 4], [47, 40, 48, 7], [24, 43, 25, 22], [15, 10, 16, 67]], // 39
  [[118, 19, 119, 6], [47, 18, 48, 31], [24, 34, 25, 34], [15, 20, 16, 61]], // 40
];
