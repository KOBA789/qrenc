import * as assert from "assert";
import { createErrorCorrectionCode, interleave, constructCodewords, maxAllowedErrors } from "./ec";
import { Version, EcLevel, NormalVersion } from "./types";

(function testPolyMod() {
  type TestCase = [[number[], number], number[]];
  const TEST_CASES: { [key: string]: TestCase } = {
    testPolyMod1: [
      [
        // prettier-ignore
        [
          0x20,0x5b,0x0b,0x78,0xd1,0x72,0xdc,0x4d,
          0x43,0x40,0xec,0x11,0xec,0x11,0xec,0x11,
        ],
        10
      ],
      // prettier-ignore
      [0xc4,0x23,0x27,0x77,0xeb,0xd7,0xe7,0xe2,0x5d,0x17]
    ],
    testPolyMod2: [
      [
        // prettier-ignore
        [
          0x20,0x5b,0x0b,0x78,0xd1,0x72,0xdc,
          0x4d,0x43,0x40,0xec,0x11,0xec,
        ],
        13
      ],
      // prettier-ignore
      [0xa8,0x48,0x16,0x52,0xd9,0x36,0x9c,0x00,0x2e,0x0f,0xb4,0x7a,0x10]
    ],
    testPolyMod3: [
      [
        // prettier-ignore
        [
          0x43,0x55,0x46,0x86,0x57,0x26,0x55,0xc2,
          0x77,0x32,0x06,0x12,0x06,0x67,0x26,
        ],
        18
      ],
      // prettier-ignore
      [
        0xd5,0xc7,0x0b,0x2d,0x73,0xf7,0xf1,0xdf,0xe5,
        0xf8,0x9a,0x75,0x9a,0x6f,0x56,0xa1,0x6f,0x27,
      ]
    ]
  };

  for (const [name, [[arg1, arg2], expected]] of Object.entries(TEST_CASES)) {
    const actual = createErrorCorrectionCode(new Uint8Array(arg1), arg2);
    assert.deepStrictEqual(actual, new Uint8Array(expected));
  }
})();

(function testInterleave() {
  // prettier-ignore
  const actual = interleave([
    new Uint8Array([0x31, 0x32, 0x33, 0x34]),
    new Uint8Array([0x35, 0x36, 0x37, 0x38]),
    new Uint8Array([0x61, 0x62, 0x63, 0x64, 0x65, 0x66]),
    new Uint8Array([0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c]),
  ]);
  // prettier-ignore
  const expected = new Uint8Array([
    0x31, 0x35, 0x61, 0x67, 0x32, 0x36, 0x62, 0x68, 0x33, 0x37,
    0x63, 0x69, 0x34, 0x38, 0x64, 0x6a, 0x65, 0x6b, 0x66, 0x6c,
  ]);
  assert.deepStrictEqual(actual, expected);
})();

(function testConstructCodewords() {
  type TestCase = [[number[], Version, EcLevel], number[], number[]];
  const TEST_CASES: { [name: string]: TestCase } = {
    simple: [
      [
        [0x20,0x5b,0x0b,0x78,0xd1,0x72,0xdc,0x4d,0x43,0x40,0xec,0x11,0xec,0x11,0xec,0x11],
        NormalVersion.tryFrom(1)!,
        "M"
      ],
      [0x20,0x5b,0x0b,0x78,0xd1,0x72,0xdc,0x4d,0x43,0x40,0xec,0x11,0xec,0x11,0xec,0x11],
      [0xc4,0x23,0x27,0x77,0xeb,0xd7,0xe7,0xe2,0x5d,0x17],
    ],
    complex: [
      [
        [
          0x43,0x55,0x46,0x86,0x57,0x26,0x55,0xc2,0x77,0x32,0x06,0x12,0x06,0x67,
          0x26,0xf6,0xf6,0x42,0x07,0x76,0x86,0xf2,0x07,0x26,0x56,0x16,0xc6,0xc7,
          0x92,0x06,0xb6,0xe6,0xf7,0x77,0x32,0x07,0x76,0x86,0x57,0x26,0x52,0x06,
          0x86,0x97,0x32,0x07,0x46,0xf7,0x76,0x56,0xc2,0x06,0x97,0x32,0x10,0xec,
          0x11,0xec,0x11,0xec,0x11,0xec
        ],
        NormalVersion.tryFrom(5)!,
        "Q"
      ],
      [
        0x43,0xf6,0xb6,0x46,0x55,0xf6,0xe6,0xf7,0x46,0x42,0xf7,0x76,0x86,0x07,
        0x77,0x56,0x57,0x76,0x32,0xc2,0x26,0x86,0x07,0x06,0x55,0xf2,0x76,0x97,
        0xc2,0x07,0x86,0x32,0x77,0x26,0x57,0x10,0x32,0x56,0x26,0xec,0x06,0x16,
        0x52,0x11,0x12,0xc6,0x06,0xec,0x06,0xc7,0x86,0x11,0x67,0x92,0x97,0xec,
        0x26,0x06,0x32,0x11,0x07,0xec
      ],
      [
        0xd5,0x57,0x94,0xeb,0xc7,0xcc,0x74,0x9f,0x0b,0x60,0xb1,0x05,0x2d,0x3c,
        0xd4,0xad,0x73,0xca,0x4c,0x18,0xf7,0xb6,0x85,0x93,0xf1,0x7c,0x4b,0x3b,
        0xdf,0x9d,0xf2,0x21,0xe5,0xc8,0xee,0x6a,0xf8,0x86,0x4c,0x28,0x9a,0x1b,
        0xc3,0xff,0x75,0x81,0xe6,0xac,0x9a,0xd1,0xbd,0x52,0x6f,0x11,0x0a,0x02,
        0x56,0xa3,0x6c,0x83,0xa1,0xa3,0xf0,0x20,0x6f,0x78,0xc0,0xb2,0x27,0x85,
        0x8d,0xec
      ]
    ]
  };

  for (const [name, [[arg1, arg2, arg3], expected1, expected2]] of Object.entries(TEST_CASES)) {
    const actual = constructCodewords(new Uint8Array(arg1), arg2, arg3);
    assert.deepStrictEqual(actual, [new Uint8Array(expected1), new Uint8Array(expected2)]);
  }
})();

(function testAllowedMaxErrors() {
  type TestCase = [[number, EcLevel], number];
  const TEST_CASES: TestCase[] = [
    [[1, 'L'], 2],
    [[1, 'M'], 4],
    [[1, 'Q'], 6],
    [[1, 'H'], 8],

    [[2, 'L'], 4],
    [[2, 'M'], 8],
    [[2, 'Q'], 11],
    [[2, 'H'], 14],

    [[3, 'L'], 7],
    [[3, 'M'], 13],
    [[3, 'Q'], 18],
    [[3, 'H'], 22],

    [[4, 'L'], 10],
    [[4, 'M'], 18],
    [[4, 'Q'], 26],
    [[4, 'H'], 32],

    [[40, 'L'], 375],
    [[40, 'M'], 686],
    [[40, 'Q'], 1020],
    [[40, 'H'], 1215],
  ];
  for (const [[v, ecLevel], expected] of TEST_CASES) {
    const actual = maxAllowedErrors(NormalVersion.tryFrom(v)!, ecLevel);
    assert.strictEqual(actual, expected);
  }
})();
